apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  serviceName: {{ .Values.service.name }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: kafka
  # volumeClaimTemplates:
  #   - metadata:
  #       name: data
  #     spec:
  #       accessModes:
  #         - ReadWriteOnce
  #       storageClassName: {{ .Values.storage.storageClassName }}
  #       resources:
  #         requests:
  #           storage: {{ .Values.storage.size }}
  template:
    metadata:
      labels:
        app: kafka
    spec:
      # securityContext:
      #   fsGroup: 1000
      initContainers:
        # - name: cleanup-lostfound
        #   image: busybox:1.35.0
        #   command: ["sh", "-c", "rm -rf /var/lib/kafka/data/lost+found"]
        #   volumeMounts:
        #     - name: data
        #       mountPath: /var/lib/kafka/data
        - name: wait-for-zookeeper
          image: busybox:1.35.0
          command:
            - sh
            - -c
            - |
              until nc -z {{ .Values.zookeeper.host }}.default.svc.cluster.local {{ .Values.zookeeper.port }}; do
                echo "[init] waiting for zookeeper"; sleep 2;
              done
      containers:
        - name: kafka
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "{{ .Values.zookeeper.host }}:{{ .Values.zookeeper.port }}"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:{{ .Values.service.port }}"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT"
            - name: KAFKA_LOGS_DIRS
              value: "/var/lib/kafka/data"
          command:
            - sh
            - -c
            - |
              BROKER_ID=${POD_NAME##*-}
              export KAFKA_BROKER_ID=$BROKER_ID
              export KAFKA_ADVERTISED_LISTENERS="PLAINTEXT://${POD_NAME}.{{ .Values.service.name }}.default.svc.cluster.local:{{ .Values.service.port }}"
              exec /etc/confluent/docker/run
          # volumeMounts:
          #   - name: data
          #     mountPath: /var/lib/kafka/data/